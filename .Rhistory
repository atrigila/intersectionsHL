knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("GenomicRanges")
#BiocManager::install("biomaRt")
#install.packages("tidyverse")
library("GenomicRanges")
library("biomaRt")
library("tidyverse")
library("RCurl")
#define data
input <- c('original', 'intronic',length(unique(genes_in_intronic_TSARs$id))*100/length(unique(gene_coord)),
'original', 'intronic+non_coding exonic',length(unique(genes_in_intronic_TSARs_v2$id))*100/length(unique(gene_coord)),
'TAD', 'intronic',length(unique(ARs_in_HL_TADs$Gene_id))*100/length(unique(gene_coord)),
'TAD', 'intronic+non_coding exonic',length(unique(ARs_in_HL_TADs_v2$Gene_id))*100/length(unique(gene_coord)),
'regulatory domain', 'intronic',length(unique(Genes_Numb_ARs$gene))*100/length(unique(gene_coord)),
'regulatory domain', 'intronic+non_coding exonic',length(unique(Genes_Numb_ARs_v2$gene))*100/length(unique(gene_coord)),
'PAML', 'coding',53*100/length(unique(gene_coord)),
'phyloP', 'coding',63*100/length(unique(gene_coord))
)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
ARs_in_HL_TADs
ARs_in_HL_TADs$Gene_id
length(unique(ARs_in_HL_TADs$Gene_id))
rmarkdown::render_site()
rmarkdown::render_site()
df
View(df)
53/320
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("GenomicRanges")
#BiocManager::install("biomaRt")
#install.packages("tidyverse")
library("GenomicRanges")
library("biomaRt")
library("tidyverse")
library("RCurl")
kable(df)
knitr::kable(df)
knitr::kable(df)
#define data
input <- c('original', 'intronic',length(unique(genes_in_intronic_TSARs$id))*100/length(unique(gene_coord)),
'original', 'intronic+non_coding exonic',length(unique(genes_in_intronic_TSARs_v2$id))*100/length(unique(gene_coord)),
'TAD', 'intronic',length(unique(ARs_in_HL_TADs$Gene_id))*100/length(unique(gene_coord)),
'TAD', 'intronic+non_coding exonic',length(unique(ARs_in_HL_TADs_v2$Gene_id))*100/length(unique(gene_coord)),
'regulatory domain', 'intronic',length(unique(Genes_Numb_ARs$gene))*100/length(unique(gene_coord)),
'regulatory domain', 'intronic+non_coding exonic',length(unique(Genes_Numb_ARs_v2$gene))*100/length(unique(gene_coord)),
'PAML', 'coding',53*100/320,
'phyloP', 'coding',63*100/length(unique(gene_coord))
)
#define data
input <- c('original', 'intronic',length(unique(genes_in_intronic_TSARs$id))*100/length(unique(gene_coord)),
'original', 'intronic+non_coding exonic',length(unique(genes_in_intronic_TSARs_v2$id))*100/length(unique(gene_coord)),
'TAD', 'intronic',length(unique(ARs_in_HL_TADs$Gene_id))*100/length(unique(gene_coord)),
'TAD', 'intronic+non_coding exonic',length(unique(ARs_in_HL_TADs_v2$Gene_id))*100/length(unique(gene_coord)),
'regulatory domain', 'intronic',length(unique(Genes_Numb_ARs$gene))*100/length(unique(gene_coord)),
'regulatory domain', 'intronic+non_coding exonic',length(unique(Genes_Numb_ARs_v2$gene))*100/length(unique(gene_coord)),
'PAML', 'coding',53*100/320,
'phyloP', 'coding',63*100/length(unique(gene_coord))
)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("GenomicRanges")
#BiocManager::install("biomaRt")
#install.packages("tidyverse")
library("GenomicRanges")
library("biomaRt")
library("tidyverse")
library("RCurl")
data <- read.table("TAD_fetalCP_Won2016.bed", col.names=c("chr", "start", "end"))
tad <- with(data, GRanges(chr, IRanges(start, end)))
genome(tad) <- "hg19"
tad
gene_coord_table <- read.table("genecoords.txt", header = TRUE)
gene_coord <- with(gene_coord_table, GRanges(chr, IRanges(start, end), id=gene_name))
genome(gene_coord) <- "hg19"
gene_coord
all_TSARs <- read.table("S1_Holloway.txt", header = TRUE)
exons <- read.table("Exons.bed", col.names=c("chr", "start", "end", "id", "value", "strand"))
# Convert to Granges
allTSARs_coord <- with(all_TSARs, GRanges(chr, IRanges(start, end), id=TSAR))
genome(allTSARs_coord) <- "hg19"
exons_coord <- with(exons, GRanges(chr, IRanges(start, end), id=id))
genome(exons_coord) <- "hg19"
# Transform to granges and obtain TSARs that intersect exons
my_overlaps <- findOverlaps(query = exons_coord, subject = allTSARs_coord)
my_query <- queryHits(my_overlaps)
my_subject <- subjectHits(my_overlaps)
# Subset exonic and intronic TSARs
exonic_TSARs <- data.frame(chr = allTSARs_coord[my_subject]@seqnames,
start = allTSARs_coord[my_subject]@ranges@start,
end = allTSARs_coord[my_subject]@ranges@start + allTSARs_coord[my_subject]@ranges@width,
id = allTSARs_coord[my_subject]$id)
exonic_TSARs <- exonic_TSARs %>% unique() # Data Frame
intronic_TSARs <- all_TSARs %>% anti_join(exonic_TSARs,by = c("TSAR" = "id")) #Data Frame
# Transform intronic_TSARs dataframe to GRanges object
intronic_TSARs_coord <- with(intronic_TSARs, GRanges(chr, IRanges(start, end), id=TSAR))
intronic_TSARs_coord
my_overlaps <- findOverlaps(query = gene_coord, subject = intronic_TSARs_coord)
my_query <- queryHits(my_overlaps)
my_subject <- subjectHits(my_overlaps)
# chr,start,end from TAD, id from gene
genes_in_intronic_TSARs <- data.frame(chr = intronic_TSARs_coord[my_subject]@seqnames,
start = intronic_TSARs_coord[my_subject]@ranges@start,
end = intronic_TSARs_coord[my_subject]@ranges@start + intronic_TSARs_coord[my_subject]@ranges@width,
id = gene_coord[my_query]$id)
# Read coding exons and transform into granges
coding_exons <- read.table("CodingExons.bed", col.names=c("chr", "start", "end", "id", "value", "strand"))
codingexons_coord <- with(coding_exons, GRanges(chr, IRanges(start, end), id=id))
my_overlaps <- findOverlaps(query = codingexons_coord, subject = allTSARs_coord)
my_query <- queryHits(my_overlaps)
my_subject <- subjectHits(my_overlaps)
# Subset into coding exons TSARs and intronic/non-coding exonic TSARs
codingexons_TSARs <- data.frame(chr = allTSARs_coord[my_subject]@seqnames,
start = allTSARs_coord[my_subject]@ranges@start,
end = allTSARs_coord[my_subject]@ranges@start + allTSARs_coord[my_subject]@ranges@width,
id = allTSARs_coord[my_subject]$id)
codingexons_TSARs <- codingexons_TSARs %>% unique()
intronic_TSARs_2 <- all_TSARs %>% anti_join(codingexons_TSARs,by = c("TSAR" = "id"))
## Intronic TSARs v2: intersection with HL Genes
intronic_TSARs_2 <- with(intronic_TSARs_2, GRanges(chr, IRanges(start, end), id="TSAR"))
my_overlaps <- findOverlaps(query = gene_coord, subject = intronic_TSARs_2)
my_query <- queryHits(my_overlaps)
my_subject <- subjectHits(my_overlaps)
genes_in_intronic_TSARs_v2 <- data.frame(chr = intronic_TSARs_2[my_subject]@seqnames,
start = intronic_TSARs_2[my_subject]@ranges@start,
end = intronic_TSARs_2[my_subject]@ranges@start + intronic_TSARs_2[my_subject]@ranges@width,
id = gene_coord[my_query]$id)
genes_in_intronic_TSARs_v2_unique <- unique(genes_in_intronic_TSARs_v2$id)
my_overlaps <- findOverlaps(query = gene_coord, subject = tad)
my_query <- queryHits(my_overlaps)
my_subject <- subjectHits(my_overlaps)
# chr,start,end from TAD, id from gene
genes_in_TADs <- data.frame(chr = tad[my_subject]@seqnames,
start = tad[my_subject]@ranges@start,
end = tad[my_subject]@ranges@start + tad[my_subject]@ranges@width,
id = gene_coord[my_query]$id)
genes_in_TADs <-  with(genes_in_TADs, GRanges(chr, IRanges(start, end), id=id))
# Find intersection between ARs and TADs location for each gene
tads_ars_overlaps <- findOverlaps(query = intronic_TSARs_coord, subject = genes_in_TADs)
my_query <- queryHits(tads_ars_overlaps)
my_subject <- subjectHits(tads_ars_overlaps)
# Report chr, start, end from TADs and id from ARs and Gene
ARs_in_HL_TADs <- data.frame(chr = genes_in_TADs[my_subject]@seqnames,
start = genes_in_TADs[my_subject]@ranges@start,
end = genes_in_TADs[my_subject]@ranges@start + genes_in_TADs[my_subject]@ranges@width,
AR_id = intronic_TSARs_coord[my_query]$id,
Gene_id = genes_in_TADs[my_subject]$id)
ARs_in_HL_TADs_count <- ARs_in_HL_TADs %>% group_by(Gene_id) %>% summarize(count = n()) %>% arrange(desc(count))
ARs_in_HL_TADs_count
# Find intersection between ARs_v2 and TADs location for each gene
tads_ars_overlaps_v2 <- findOverlaps(query = intronic_TSARs_2, subject = genes_in_TADs)
my_query <- queryHits(tads_ars_overlaps_v2)
my_subject <- subjectHits(tads_ars_overlaps_v2)
# Report chr, start, end from TADs and id from ARs and Gene
ARs_in_HL_TADs_v2 <- data.frame(chr = genes_in_TADs[my_subject]@seqnames,
start = genes_in_TADs[my_subject]@ranges@start,
end = genes_in_TADs[my_subject]@ranges@start + genes_in_TADs[my_subject]@ranges@width,
AR_id = intronic_TSARs_2[my_query]$id,
Gene_id = genes_in_TADs[my_subject]$id)
ARs_in_HL_TADs_v2count <- ARs_in_HL_TADs_v2 %>% group_by(Gene_id) %>% summarize(count = n()) %>% arrange(desc(count))
epd_in <- read.table("epd_006.txt", header = TRUE)
epd <- epd_in %>% select("chr" = chrom, "start" = chromStart, "end" = chromEnd, strand, name)
epd$name <- str_replace(epd_in$name, "_[:digit:]+" ,"")
# Basal extension:
for (row in 1:nrow(epd)){
epd$start[row] <- epd$start[row] - 5000
epd$end[row] <- epd$end[row] + 1000
}
# Extension to up to 1000kb:
for (row in 1:nrow(epd)){
epd$start[row] <- epd$start[row] - 100000
epd$end[row] <- epd$end[row] + 100000
}
HL_regulatorydomain <- epd %>% filter(name %in% gene_coord_table$gene_name)
HL_regulatorydomain <- with(HL_regulatorydomain, GRanges(chr, IRanges(start, end),strand, name=name))
genome(HL_regulatorydomain) <- "hg19"
my_overlaps <- findOverlaps(query = HL_regulatorydomain, subject = intronic_TSARs_coord)
my_query <- queryHits(my_overlaps)
my_subject <- subjectHits(my_overlaps)
# Get gene name and ARs intersecting its regulatory domain
genes_regdom_ARs<- data.frame(
gene = HL_regulatorydomain[my_query]$name,
AR = intronic_TSARs_coord[my_query]$id)
# Remove duplicates, group by gene, count ARs
Genes_Numb_ARs <- genes_regdom_ARs %>% distinct() %>% group_by(gene) %>% summarize(count = n()) %>% arrange(desc(count))
my_overlaps <- findOverlaps(query = HL_regulatorydomain, subject = intronic_TSARs_2)
my_query <- queryHits(my_overlaps)
my_subject <- subjectHits(my_overlaps)
# Get gene name and ARs intersecting its regulatory domain
genes_regdom_ARs_v2<- data.frame(
gene = HL_regulatorydomain[my_query]$name,
AR = intronic_TSARs_2[my_query]$id)
# Remove duplicates, group by gene, count ARs
Genes_Numb_ARs_v2 <- genes_regdom_ARs_v2 %>% distinct() %>% group_by(gene) %>% summarize(count = n()) %>% arrange(desc(count))
#define data
input <- c('original', 'intronic',length(unique(genes_in_intronic_TSARs$id))*100/length(unique(gene_coord)),
'original', 'intronic+non_coding exonic',length(unique(genes_in_intronic_TSARs_v2$id))*100/length(unique(gene_coord)),
'TAD', 'intronic',length(unique(ARs_in_HL_TADs$Gene_id))*100/length(unique(gene_coord)),
'TAD', 'intronic+non_coding exonic',length(unique(ARs_in_HL_TADs_v2$Gene_id))*100/length(unique(gene_coord)),
'regulatory domain', 'intronic',length(unique(Genes_Numb_ARs$gene))*100/length(unique(gene_coord)),
'regulatory domain', 'intronic+non_coding exonic',length(unique(Genes_Numb_ARs_v2$gene))*100/length(unique(gene_coord)),
'PAML', 'coding',53*100/320,
'phyloP', 'coding',63*100/length(unique(gene_coord))
)
df_1 <- matrix(input, ncol = 3, byrow = TRUE) %>%  as_tibble()
names(df_1) <- c("approach", "type", "percentage")
numeric_df <- as.numeric(df_1$percentage)
df_1$percentage <- round(numeric_df, 3)
df_1
knitr::kable(df_1)
rmarkdown::render_site()
